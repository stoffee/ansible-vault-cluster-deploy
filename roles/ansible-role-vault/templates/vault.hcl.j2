listener "tcp" {
{% if vault_tls_cert_file is defined and vault_tls_key_file is defined %}
{% set proto="https" %}
  address                  = "{{ vault_client_addr }}:{{ vault_http_port }}"
  tls_cert_file            = "{{ vault_tls_directory }}/{{ vault_tls_cert_file | basename }}"
  tls_key_file             = "{{ vault_tls_directory }}/{{ vault_tls_key_file  | basename }}"
  tls_disable_client_certs = {{ vault_tls_disable_client_certs | lower }}
{% else %}
{% set proto="http" %}
  address     = "{{ vault_client_addr }}:{{ vault_http_port }}"
  tls_disable = true
{% endif %}
}

{% if vault_storage_backend == "integrated" %}
disable_mlock = true

storage "raft" {
  path    = "{{ vault_data_directory }}/data"
  node_id = "{{ ansible_fqdn }}"
{% if cloud.provider == "none" %}
{% for vault_server in groups[vault_ansible_group] %}
  retry_join {
    leader_api_addr         = "{{ proto }}://{{ hostvars[vault_server]['ansible_fqdn'] }}:{{ vault_http_port }}"
{% if proto == "https" %}
{% if vault_tls_ca_cert_file is defined %}
    leader_ca_cert_file     = "{{ vault_tls_directory }}/{{ vault_tls_ca_cert_file | basename }}"
{% endif %}
{% if not vault_tls_disable_client_certs %}
    leader_client_cert_file = "{{ vault_tls_directory }}/{{ vault_tls_cert_file | basename }}"
    leader_client_key_file  = "{{ vault_tls_directory }}/{{ vault_tls_key_file  | basename }}"
{% endif %}
{% endif %}
  }
{% endfor %}
{% else %}
  retry_join {
{% if cloud.provider == "gce" %}
    auto_join             = "provider=gce tag_value={{ cloud.gce_tag }}"
{% elif cloud.provider == "azure" %}
    auto_join             = "provider=azure subscription_id={{ cloud.azure_subscription_id }} resource_group={{ cloud.azure_resource_group }} vm_scale_set={{ cloud.azure_vm_scale_set }}"
{% elif cloud.provider == "aws" %}
    auto_join             = "provider=aws tag_key={{ cloud.aws_tag_key }} tag_value={{ cloud.aws_tag_value }}"
{% endif %}
    auto_join_scheme      = "https"
{% if vault_tls_ca_cert_file is defined %}
    leader_ca_cert_file   = "{{ vault_tls_directory }}/{{ vault_tls_ca_cert_file | basename }}"
{% endif %}
    leader_tls_servername = "{{ ansible_fqdn }}"
  }
{% endif %}
}
{% elif vault_storage_backend == "consul" %}
disable_mlock = false

storage "consul" {
  address = "127.0.0.1:{{ consul_http_port }}"
  scheme  = "{{ consul_scheme }}"
  path    = "{{ consul_vault_kv_path }}"
{% if consul_vault_acl_token is defined %}
  token   = "{{ consul_vault_acl_token }}"
{% endif %}
{% if consul_tls_cert_file is defined and consul_tls_key_file is defined %}
{% if consul_tls_ca_file is defined %}
  tls_ca_file     = "{{ consul_tls_directory }}/{{ consul_tls_ca_file | basename }}"
{% endif %}
  tls_cert_file   = "{{ consul_tls_directory }}/{{ consul_tls_cert_file | basename }}"
  tls_key_file    = "{{ consul_tls_directory }}/{{ consul_tls_key_file | basename }}"
  tls_skip_verify = "{{ consul_tls_skip_verify }}"
{% endif %}
}
{% else %}
storage "file" {
  path = "{{ vault_data_directory }}/data"
}
{% endif %}

seal "{{ vault_seal.type }}" {
{% for item in vault_seal if not item == "type" %}
  {{ item }} = "{{ vault_seal[item] }}"
{% endfor %}
}

{% if vault_telemetry is defined %}
telemetry {
{% for item in vault_telemetry %}
  {{ item }} = {{ vault_telemetry[item] }}
{% endfor %}
}
{% endif %}

{% if vault_enable_plugins %}
plugin_directory = "{{ vault_plugin_directory }}"
{% endif %}

{% if vault_license_file is defined %}
license_path = "{{ vault_license_directory }}/{{ vault_license_file | basename }}"
{% endif %}

api_addr      = "{{ proto }}://{{ ansible_fqdn }}:{{ vault_http_port }}"
cluster_addr  = "{{ proto }}://{{ ansible_fqdn }}:{{ vault_api_port }}"
ui            = {{ vault_ui_enable | lower }}
plugin_directory="{{ vault_data_directory }}/plugins" #updated by srikark
